
#### Modelo relacional
Na passagem do modelo em UML para o esquema relacional decídimos manter um padrão consistente na conversão.

As transições foram feitas da maneira como foi mostrado nas aulas:
    Numa relação de "um para muitos" decidimos adicionar uma foreign key no lado do "muitos" que aponta para a primary key da outra relação.
    Na relação de "muitos para muitos" críamos uma nova relação que contém duas foreign keys, em que cada uma aponta para a primary key da relação.
    Finalmente, para a multiplicidade "um para um" foi adicionado uma foreign key na relação em que se esperava menos tuples que aponta para a primary key da outra relação.

Usou-se o estilo E/R para as relações de subclasses das classes de Veículo e Utilizador. Assim existe uma entidade principal, que é a super classe,
e nas subclasses existe uma foreign key que referencia a Primary Key da super classe e também é uma Primary Key da subclasse.

--"Colocar aqui o modelo relacional"
Veículo(id [PK], Consumo, Cor,Preço,Ano, Peso, Tração, Número_de_assentos, Estado, Série->Motor, id_vendedor->Vendedor)
Combustível(id [PK], Tipo)
Funciona_a(id_veículo [PK]->Veículo, id_combustível [PK]->Combustível)
Motor(Número_série [PK], Nome, Cilindrada, Número de cilindros, Número de válvulas, Aspiração, Binário, Potência)
Utilizador(id [PK], Email, Hash_Palavra_Passe, Username, País, Morada)
Cliente(id [PK]->Utilizador, Preferências)
Vendedor(id [PK]->Utilizador, histórico, marca_associada)
Anúcio(id, Data, id_veículo->Veículo, id_vendedor->Vendedor)
Interagiu(id_anúncio [PK]->Anúcio, id_vendedor->Vendedor)
Marca(id [PK], Nome, País_Origem, id_vendedor->Vendedor)
Carro(id [PK]->Veículo, Categoria, Número_portas)
Motociclo(id [PK]->Veículo, Categoria)
Modelo(id [PK], Nome, Data_lançamento, Variante, id_carro->Carro, id_motociclo->Motociclo, id_marca->Marca)

#### Dependencias Funcionais

Quanto toca ás dependências funcionais estas são bastante simples, devido à maneira como o projeto foi abordado e estruturado.
Logo as diversas entidades já se encontram isoladas e separadas.
Isto faz com que as únicas dependências funcionais, que existem em cada relação, sejam o seu ID determinar o resto dos atributos.

Veículo: id → Consumo, Cor, Ano, Tração, Número de assentos, Estado, Série, id_vendedor, Peso, Preço
Combustível: id → Tipo
Funciona_a: "Esta relação não apresenta qualquer dependência funcional"
Motor: Número_série → Nome, Cilindrada, Número_de_cilindros, Número_de_válvulas, Aspiração, Binário, Potência
Utilizador: id → Email, Hash_Palavra_Passe, Username, País, Morada
Cliente: id → Preferências
Vendedor: id → histórico, marca_associada
Anúncio: id → Data, id_veículo, id_vendedor
Interagiu: "Esta relação não apresenta qualquer dependência funcional"
Marca: id → Nome, País_Origem, id_vendedor
Carro: id → Categoria, Número_portas
Motociclo: id → Categoria
Modelo: id → Nome, Data_lançamento, Variante, id_carro, id_motociclo, id_marca

Para um relação estar na Forma Normal Boyce-Codd, é preciso que para todas as dependências funcionais não triviais,
o lado esquerdo da dependência, seja uma superchave da relação (relembrando que uma chave também é uma superchave).
A Terceira Forma Normal têm a mesma regra da Forma anterior, porém acrescenta uma regra que define que os atributos
do lado direito sejam Prime, ou seja, são atributos que fazem parte de uma chave. Se a relação corresponder a uma das regras,
está na Terceira Forma Normal;

Pode-se concluir que para termos uma ou ambas as formas, temos que garantir que para todas as suas dependências funcionais os atributos do lado 
esquerdo são uma chave ou superchave e/ou os atributos do lado direito são prime.

As nossas relações já partem de uma chave primária, que é o ID. Assim é possível concluir que as
relações já se encontram numa das Formas Normais pedidas, não necessitando de se realizar decomposições 
para chegar a uma delas.

Dada a maneira como este projeto foi abordado, já era de esperar que as relações já tivessem nas Formas Normais pedidas,
devido ao facto de o ID (Primary key) determinar o resto dos atributos, criando dependências funcionais muito simples.


#### Criação base de dados

Cada relação considerada deve ser representada por uma tabela com o mesmo nome, criada usando o comando CREATE TABLE <nome da relação>(<atributos>).
Os atributos devem ser listados separados por vírgulas, e cada um deve ser associado a um tipo de dado que lhe vai ser fornecido.
Apesar do SQLite não impor qualquer restrição quanto ao tipo de dados inseridos na coluna, é uma boa prática definir esses tipos ao criar a base de dados.

No nosso caso, os tipos de dados utilizados foram: TEXT para atributos de texto, INT para valores numéricos e DATE para datas (no formato 'YYYY-MM-DD').

Em todas as definições de tabelas, também especificamos as chaves primárias (primary keys) da relação.
Quando a chave primária é formada por um único atributo, utilizamos as palavras PRIMARY KEY logo após o nome do atributo.
Nos casos em que a chave primária é composta por mais de um atributo, utilizamos a sintaxe PRIMARY KEY(<atributo1>, <atributo2>) para indicar os atributos que a compõem.

Além das chaves primárias, também definimos chaves estrangeiras para representar as associações entre as relações.
Para isso, utilizamos a sintaxe <atributo> REFERENCES <tabela>(<atributo>) ON UPDATE CASCADE e ON DELETE SET NULL,
garantindo que, ao atualizar os valores na tabela referenciada, as alterações sejam propagadas automaticamente para todas as tabelas associadas e assim resolver possíveis problemas.

Decidimos incluir também restrições para quase todos os atributos das tabelas, usando para a maioria dos casos o NOT NULL.

Para evitar problemas ao criar a base de dados, incluímos no início do arquivo comandos que removem as tabelas caso elas já existam.
Utilizamos a instrução DROP TABLE IF EXISTS <nome da tabela> para apagar as tabelas existentes antes de recriá-las.


#### Carregamento de Dados

No que toca ao acto de popular a nossa base de dados, usamos diversos comandos de 
'INSERT INTO TABLE <nome da tabela> VALUES (<valores>);' no ficheiro populate1.sql. 

Nas nossas tabelas principais quisémos colocar entre 8 a 12 tuplos. Fizémos também um esforço para utilizar dados reais,
que obtémos através de um 'scraping' de uma website (foi usado este URL "https://api.api-ninjas.com/v1/cars?limit=1&model=").
Aquilo que não conseguimos encontrar, preenchémos com dados fictícios, mas que fizessem sentido dado o contexto da nossa base de dados.

Para criar os 'INSERT' utilízamos um script de Python, a fim de tornar o processo mais automizado e eficiente. Assim tívemos de nos preocupar 
mais com a consistência das primary keys e as foreign keys.

Tentámos colocar uma quantidade de dados que desse um senso de uma base de dados verdadeira de algum serviço 
venda de carros online.