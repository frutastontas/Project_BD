

#### Modelo relacional
Na passagem do modelo em UML para o esquema relacional decídimos manter
um padrão consistente na conversão.

As transições foram feitas da maneira como foi mostrado nas aulas. Por exemplo, numa relação de "um para muitos" tinha-se duas opções, ou criava-se 
uma nova relação com duas foreign keys que apontam para cada uma das relaçôes, sendo a Primary Key a chave que aponta para a relação de "Many", ou
colocava-se no lado "Many" uma foreign key que referencia a outra relação.

Na nossa conversão decídimos ir com o primeiro, porque achamos que ficaria mais simples e percéptivel. Assim, cada foreign key mapeia
para o ID (ou um nome equivalente) das entidades associadas e têm uma abreviatura dessa entidade no nome.

Usou-se o estilo E/R para as relações de subclasses das classes de Veículo e Utilizador. Assim existe uma entidade principal, que é a super classe,
e nas subclasses existe uma foreign key que referencia a Primary Key da super classe,
que neste caso é o ID, e também é uma Primary Key da subclasse.

--"Colocar aqui o modelo relacional"


#### Dependencias Funcionais

Quanto toca ás dependências funcionais estas são bastante simples, devido à maneira como o projeto foi abordado e estruturado.
Logo as diversas entidades já se encontram isoladas e separadas.
Isto faz com que as únicas dependências funcionais ,que existem em cada relação, sejam o seu ID determinar o resto dos atributos.

Veículo: id → Consumo, Cor, Ano, Tração, Número de assentos, Estado, Série, id_vendedor
Combustível: id → Tipo
Funciona_a: "Esta relação não apresenta qualquer dependência funcional"
Motor: Número_série → Nome, Cilindrada, Número de cilindros, Número de válvulas, Aspiração, Binário, Potência
Utilizador: id → Email, Hash Palavra Passe, Username, País, Morada
Cliente: id → Preferências
Vendedor: id → histórico de vendas, Marca associada
Anúncio: id → Data, id_veículo, id_vendedor
Interagiu: "Esta relação não apresenta qualquer dependência funcional"
Marca: id → Nome, País_Origem, id_vendedor
Carro: id → Categoria, Número de portas
Motociclo: id → Categoria
Modelo: id → Nome, Data de lançamento, Variante, id_carro, id_motociclo, id_marca

Para um relação estar na Forma Normal Boyce-Codd, é preciso que para todas as dependências funcionais não triviais,
o lado esquerdo seja uma superchave da relação (relembrando que uma chave também é uma superchave).
A Terceira Forma Normal têm a mesma regra da Forma anterior, porém acrescenta uma regra que define que os atributos
do lado direito são prime, ou seja, são atributos que fazem parte de uma chave. Se a relação corresponder a uma das regras,
está na Terceira Forma Normal;

Pode-se concluir que para termos uma ou ambas as formas, temos que garantir que para todas as suas dependências funcionais os atributos do lado 
esquerdo são uma chave ou superchave e/ou os atributos do lado direito são prime.

As nossas relações já partem de uma chave primária, que é o ID. Assim é possível concluir que as
relações já se encontram numa das Formas Normais pedidas, não necessitando de se realizar decomposições 
para chegar a uma delas.

Dada a maneira como este projeto foi abordado, já era de esperar que as relações já tivessem nas Formas Normais pedidas,
devido ao facto de o ID (Primary key) determinar o resto dos atributos, criando dependências funcionais muito simples.




